////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Data_path.vf
// /___/   /\     Timestamp : 05/21/2015 15:09:21
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath E:/organization/OrgLab/ipcore_dir -intstyle ise -family spartan6 -verilog E:/organization/OrgLab/Data_path.vf -w E:/organization/OrgLab/Data_path.sch
//Design Name: Data_path
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module alu_MUSER_Data_path(A, 
                           ALU_operation, 
                           B, 
                           overflow, 
                           res, 
                           zero);

    input [31:0] A;
    input [2:0] ALU_operation;
    input [31:0] B;
   output overflow;
   output [31:0] res;
   output zero;
   
   wire N0;
   wire [32:0] S;
   wire [31:0] XLXN_5;
   wire [31:0] XLXN_10;
   wire [31:0] XLXN_11;
   wire [31:0] XLXN_12;
   wire [31:0] XLXN_26;
   wire [31:0] XLXN_28;
   wire [31:0] XLXN_33;
   wire [31:0] res_DUMMY;
   
   assign res[31:0] = res_DUMMY[31:0];
   mux8to1_32  XLXI_1 (.sel(ALU_operation[2:0]), 
                      .x0(XLXN_5[31:0]), 
                      .x1(XLXN_33[31:0]), 
                      .x2(S[31:0]), 
                      .x3(XLXN_10[31:0]), 
                      .x4(XLXN_11[31:0]), 
                      .x5(XLXN_12[31:0]), 
                      .x6(S[31:0]), 
                      .x7({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, S[32]}), 
                      .o(res_DUMMY[31:0]));
   or_bit_32  XLXI_2 (.A(res_DUMMY[31:0]), 
                     .o(zero));
   and32  XLXI_3 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_5[31:0]));
   ADC32  XLXI_5 (.A(A[31:0]), 
                 .B(XLXN_28[31:0]), 
                 .C0(ALU_operation[2]), 
                 .S(S[32:0]));
   xor32  XLXI_6 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_10[31:0]));
   nor32  XLXI_7 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_11[31:0]));
   srl32  XLXI_8 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_12[31:0]));
   xor32  XLXI_9 (.A(XLXN_26[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_28[31:0]));
   SignalExt_32  XLXI_10 (.S(ALU_operation[2]), 
                         .So(XLXN_26[31:0]));
   GND  XLXI_11 (.G(N0));
   or32  XLXI_13 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_33[31:0]));
endmodule
`timescale 1ns / 1ps

module Data_path(ALUSrc_B, 
                 ALU_Control, 
                 Branch, 
                 clk, 
                 Data_in, 
                 inst_field, 
                 Jump, 
                 MemtoReg, 
                 RegDst, 
                 RegWrite, 
                 rst, 
                 ALU_out, 
                 Data_out, 
                 PC_out);

    input ALUSrc_B;
    input [2:0] ALU_Control;
    input Branch;
    input clk;
    input [31:0] Data_in;
    input [25:0] inst_field;
    input Jump;
    input MemtoReg;
    input RegDst;
    input RegWrite;
    input rst;
   output [31:0] ALU_out;
   output [31:0] Data_out;
   output [31:0] PC_out;
   
   wire [31:0] Imm_32;
   wire N0;
   wire [31:28] pc_4;
   wire V5;
   wire [31:0] XLXN_1;
   wire [31:0] XLXN_2;
   wire [31:0] XLXN_6;
   wire [4:0] XLXN_14;
   wire XLXN_23;
   wire [31:0] XLXN_27;
   wire XLXN_28;
   wire [31:0] XLXN_29;
   wire XLXN_31;
   wire [31:0] XLXN_39;
   wire [31:0] XLXN_40;
   wire [31:0] ALU_out_DUMMY;
   wire [31:0] Data_out_DUMMY;
   wire [31:0] PC_out_DUMMY;
   
   assign ALU_out[31:0] = ALU_out_DUMMY[31:0];
   assign Data_out[31:0] = Data_out_DUMMY[31:0];
   assign PC_out[31:0] = PC_out_DUMMY[31:0];
   alu_MUSER_Data_path  U1 (.A(XLXN_1[31:0]), 
                           .ALU_operation(ALU_Control[2:0]), 
                           .B(XLXN_2[31:0]), 
                           .overflow(), 
                           .res(ALU_out_DUMMY[31:0]), 
                           .zero(XLXN_23));
   Regs  U2 (.clk(clk), 
            .L_S(RegWrite), 
            .rst(rst), 
            .R_addr_A(inst_field[25:21]), 
            .R_addr_B(inst_field[20:16]), 
            .Wt_addr(XLXN_14[4:0]), 
            .Wt_data(XLXN_6[31:0]), 
            .rdata_A(XLXN_1[31:0]), 
            .rdata_B(Data_out_DUMMY[31:0]));
   Decode_pc_Int  U3 (.clk(clk), 
                     .INT(XLXN_31), 
                     .pc_next(XLXN_29[31:0]), 
                     .reset(rst), 
                     .RFE(XLXN_31), 
                     .pc(PC_out_DUMMY[31:0]));
   Ext_32  XLXI_4 (.imm_16(inst_field[15:0]), 
                  .Imm_32(Imm_32[31:0]));
   mux2to1_32  XLXI_7 (.a(Imm_32[31:0]), 
                      .b(Data_out_DUMMY[31:0]), 
                      .sel(ALUSrc_B), 
                      .o(XLXN_2[31:0]));
   mux2to1_32  XLXI_9 (.a(Data_in[31:0]), 
                      .b(ALU_out_DUMMY[31:0]), 
                      .sel(MemtoReg), 
                      .o(XLXN_6[31:0]));
   mux2to1_5  XLXI_10 (.a(inst_field[15:11]), 
                      .b(inst_field[20:16]), 
                      .sel(RegDst), 
                      .o(XLXN_14[4:0]));
   AND2  XLXI_11 (.I0(XLXN_23), 
                 .I1(Branch), 
                 .O(XLXN_28));
   mux2to1_32  XLXI_12 (.a({pc_4[31:28], inst_field[25:0], N0, N0}), 
                       .b(XLXN_27[31:0]), 
                       .sel(Jump), 
                       .o(XLXN_29[31:0]));
   mux2to1_32  XLXI_13 (.a(XLXN_40[31:0]), 
                       .b(XLXN_39[31:0]), 
                       .sel(XLXN_28), 
                       .o(XLXN_27[31:0]));
   GND  XLXI_14 (.G(XLXN_31));
   add_32  XLXI_15 (.a(XLXN_39[31:0]), 
                   .b({Imm_32[29:0], N0, N0}), 
                   .c(XLXN_40[31:0]));
   add_32  XLXI_16 (.a(PC_out_DUMMY[31:0]), 
                   .b({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, V5, N0, 
         N0}), 
                   .c(XLXN_39[31:0]));
   GND  XLXI_17 (.G(N0));
   VCC  XLXI_18 (.P(V5));
endmodule
